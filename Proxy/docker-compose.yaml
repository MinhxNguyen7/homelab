# Homelab Proxy - Routes internet traffic through WireGuard to home services
# Provides SSL termination with Let's Encrypt certificates

services:
  # NGINX reverse proxy with SSL termination
  nginx:
    image: nginx:alpine
    container_name: nginx-proxy
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
      - ./nginx/logs:/var/log/nginx
    networks:
      - proxy-network
    depends_on:
      - wireguard

  # Let's Encrypt certificate generation (one-time run)
  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: sh -c "certonly --webroot -w /var/www/certbot --force-renewal --email ${LETSENCRYPT_EMAIL} $(echo ${CERTBOT_DOMAINS} | sed 's/[^ ]* */-d &/g') --agree-tos"

  # Automatic certificate renewal service
  certbot-renew:
    image: certbot/certbot
    container_name: certbot-renew
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: sh -c "while :; do sleep 12h; certbot renew --quiet; done"
    restart: unless-stopped

  # WireGuard VPN server to tunnel traffic to home network
  wireguard:
    image: linuxserver/wireguard:latest
    container_name: wireguard
    privileged: true
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=${WG_PUID}
      - PGID=${WG_PGID}
      - TZ=${WG_TZ}
      - SERVERURL=auto
      - SERVERPORT=${WG_SERVERPORT}
      - PEERS=${WG_PEERS}
      - PEERDNS=auto
      - INTERNAL_SUBNET=${WG_INTERNAL_SUBNET}
      - ALLOWEDIPS=${WG_ALLOWEDIPS}
    ports:
      - '${WG_SERVERPORT}:51820/udp'
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    volumes:
      - ./wireguard/config:/config
      - /lib/modules:/lib/modules
    restart: unless-stopped
    networks:
      - proxy-network

  # Automated routing setup - routes home subnet traffic through WireGuard container
  setup-routing:
    image: alpine:latest
    container_name: setup-routing
    network_mode: host
    privileged: true
    command: sh -c "
      apk add --no-cache docker-cli &&
      sleep 10 &&
      WG_IP=$$(docker inspect wireguard --format='{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}') &&
      ip route add ${WG_ALLOWEDIPS} via $$WG_IP 2>/dev/null || true &&
      sysctl -w net.ipv4.ip_forward=1 &&
      iptables -A FORWARD -d ${WG_ALLOWEDIPS} -j ACCEPT 2>/dev/null || true &&
      iptables -A FORWARD -s ${WG_ALLOWEDIPS} -j ACCEPT 2>/dev/null || true &&
      echo 'Routing setup complete' &&
      sleep infinity
      "
    depends_on:
      - wireguard
    restart: unless-stopped

networks:
  proxy-network:
    driver: bridge